package com.riskmanagement.back_riskmanagement.service.impl;

import com.riskmanagement.back_riskmanagement.dto.model.Vulnerability;
import com.riskmanagement.back_riskmanagement.dto.request.VulnerabilityRequest;
import com.riskmanagement.back_riskmanagement.dto.response.VulnerabilityResponse;
import com.riskmanagement.back_riskmanagement.entity.VulnerabilityEntity;
import com.riskmanagement.back_riskmanagement.exception.codes.ExceptionCodesRiskManagementDatabase;
import com.riskmanagement.back_riskmanagement.exception.riskmanagement.VulnerabilityException;
import com.riskmanagement.back_riskmanagement.repository.VulnerabilityRepository;
import com.riskmanagement.back_riskmanagement.service.interfaces.VulnerabilityService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private final VulnerabilityRepository vulnerabilityRepository;

    @Override
    public List<VulnerabilityResponse> findAll() {
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll().stream()
                .map(Vulnerability::toModel)
                .toList();
        return vulnerabilities.stream()
                .map(Vulnerability::toResponse)
                .toList();
    }

    @Override
    public VulnerabilityResponse findById(Integer id) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(id)
                .map(Vulnerability::toModel)
                .orElseThrow(() -> new VulnerabilityException(
                        ExceptionCodesRiskManagementDatabase.DB_RISK_MANAGEMENT_023, null));
        return Vulnerability.toResponse(vulnerability);
    }

    @Override
    public VulnerabilityResponse create(VulnerabilityRequest vulnerabilityRequest) {
        // Verificar que user_id no sea null
        if (vulnerabilityRequest.getResponsibleUserId() == null) {
            throw new VulnerabilityException(
                    ExceptionCodesRiskManagementDatabase.DB_RISK_MANAGEMENT_023,
                    "Responsible user ID must not be null"
            );
        }

        // Verificar que active no sea null
        if (vulnerabilityRequest.getActive() == null) {
            vulnerabilityRequest.setActive(true);
        }

        // Convertir el request a modelo
        Vulnerability vulnerability = Vulnerability.toModel(vulnerabilityRequest);
        VulnerabilityEntity vulnerabilityEntity = Vulnerability.toEntity(vulnerability);
        vulnerabilityEntity.setActive(vulnerabilityRequest.getActive());
        vulnerabilityEntity.setResponsibleUserId(vulnerabilityRequest.getResponsibleUserId());
        VulnerabilityEntity savedEntity = vulnerabilityRepository.save(vulnerabilityEntity);
        return Vulnerability.toResponse(Vulnerability.toModel(savedEntity));
    }

    @Override
    public VulnerabilityResponse update(Integer id, VulnerabilityRequest vulnerabilityRequest) {
        VulnerabilityEntity vulnerabilityEntity = vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new VulnerabilityException(
                        ExceptionCodesRiskManagementDatabase.DB_RISK_MANAGEMENT_023, null));

        if (vulnerabilityRequest.getName() != null) {
            vulnerabilityEntity.setName(vulnerabilityRequest.getName());
        }
        if (vulnerabilityRequest.getDescription() != null) {
            vulnerabilityEntity.setDescription(vulnerabilityRequest.getDescription());
        }
        if (vulnerabilityRequest.getSeverity() != null) {
            vulnerabilityEntity.setSeverity(vulnerabilityRequest.getSeverity());
        }

        vulnerabilityRepository.save(vulnerabilityEntity);
        return Vulnerability.toResponse(Vulnerability.toModel(vulnerabilityEntity));
    }

    @Override
    public VulnerabilityResponse delete(Integer id) {
        Vulnerability vulnerability = vulnerabilityRepository.findById(id)
                .map(Vulnerability::toModel)
                .orElseThrow(() -> new VulnerabilityException(
                        ExceptionCodesRiskManagementDatabase.DB_RISK_MANAGEMENT_023, null));
        vulnerabilityRepository.deleteById(id);
        return Vulnerability.toResponse(vulnerability);
    }
}