package com.riskmanagement.back_riskmanagement.controller;

import com.riskmanagement.back_riskmanagement.dto.request.VulnerabilityRequest;
import com.riskmanagement.back_riskmanagement.dto.response.VulnerabilityResponse;
import com.riskmanagement.back_riskmanagement.service.interfaces.VulnerabilityService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = VulnerabilityController.VULNERABILITY_URI, produces = MediaType.APPLICATION_JSON_VALUE)
@RequiredArgsConstructor
public class VulnerabilityController {
    public static final String VULNERABILITY_URI = "/api/v1/vulnerability";

    private final VulnerabilityService vulnerabilityService;

    @GetMapping
    public ResponseEntity<List<VulnerabilityResponse>> getAllVulnerabilities() {
        return ResponseEntity.ok(vulnerabilityService.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<VulnerabilityResponse> getVulnerabilityById(@PathVariable Integer id) {
        return ResponseEntity.ok(vulnerabilityService.findById(id));
    }

    @PostMapping
    public ResponseEntity<VulnerabilityResponse> createVulnerability(@RequestBody VulnerabilityRequest vulnerabilityRequest) {
        return ResponseEntity.ok(vulnerabilityService.create(vulnerabilityRequest));
    }

    @PutMapping("/{id}")
    public ResponseEntity<VulnerabilityResponse> updateVulnerability(@PathVariable Integer id, @RequestBody VulnerabilityRequest vulnerabilityRequest) {
        return ResponseEntity.ok(vulnerabilityService.update(id, vulnerabilityRequest));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<VulnerabilityResponse> deleteVulnerability(@PathVariable Integer id) {
        return ResponseEntity.ok(vulnerabilityService.delete(id));
    }
}